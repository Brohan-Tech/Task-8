name: CD - Terraform IaC

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform Action (apply or destroy)'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy
      image_uri:
        description: 'Docker image URI (optional if downloaded from CI)'
        required: false

env:
  AWS_REGION: us-east-2

jobs:
  terraform:
    name: Terraform Provisioning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Image URI Artifact from CI
        if: ${{ github.event.inputs.image_uri == '' && github.event.inputs.action == 'apply' }}
        uses: actions/download-artifact@v4
        with:
          name: image-uri

      - name: Read Image URI from artifact
        if: ${{ github.event.inputs.image_uri == '' && github.event.inputs.action == 'apply' }}
        run: echo "IMAGE_URI=$(cat image-uri.txt)" >> $GITHUB_ENV

      - name: Set IMAGE_URI from input
        if: ${{ github.event.inputs.image_uri != '' && github.event.inputs.action == 'apply' }}
        run: echo "IMAGE_URI=${{ github.event.inputs.image_uri }}" >> $GITHUB_ENV

      - name: Echo Final Image URI
        if: ${{ github.event.inputs.action == 'apply' }}
        run: echo "Final Image URI being used: $IMAGE_URI"

      - name: Terraform Init
        run: terraform init

      - name: Set container image and secrets (only for apply)
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          echo "container_image     = \"$IMAGE_URI\"" > image.auto.tfvars
          echo "execution_role_arn  = \"${EXECUTION_ROLE_ARN}\"" >> image.auto.tfvars
          echo "task_role_arn       = \"${TASK_ROLE_ARN}\"" >> image.auto.tfvars
          echo "app_keys            = \"${APP_KEYS}\"" >> image.auto.tfvars
          echo "jwt_secret          = \"${JWT_SECRET}\"" >> image.auto.tfvars
          echo "admin_jwt_secret    = \"${ADMIN_JWT_SECRET}\"" >> image.auto.tfvars
          echo "api_token_salt      = \"${API_TOKEN_SALT}\"" >> image.auto.tfvars
        env:
          EXECUTION_ROLE_ARN: ${{ secrets.EXECUTION_ROLE_ARN }}
          TASK_ROLE_ARN: ${{ secrets.TASK_ROLE_ARN }}
          APP_KEYS: ${{ secrets.APP_KEYS }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
          API_TOKEN_SALT: ${{ secrets.API_TOKEN_SALT }}

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform plan

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve

